package leetcode100_200;

import java.util.Arrays;

/**
 * 最长连续序列
 * 时间复杂度为O(n)
 * @author xx
 *
 */
public class T128 {
	//一、暴力法On(3)
/*
	public boolean arrayContains(int []arr, int num) {
		for(int i=0;i<arr.length;i++) {
			if(arr[i] == num)
				return true;
		}
		return false;
	}
	public int longestConsecutive(int [] nums) {
		int longestStreak = 0;
		for(int num : nums) {
			int currentNum = num;
			int currentStreak = 1;
			while(arrayContains(nums, currentNum+1)) {
				currentNum++;
				currentStreak++;
			}
			longestStreak = Math.max(longestStreak, currentStreak);
		}
		return longestStreak;
	}
	 public static void main(String[] args) {
		 int [] nums = {100, 4, 200, 1, 3, 2};
		System.out.print(new T128().longestConsecutive(nums));
	}
*/
	//二、排序法O(nlogn)
	public int longestConsecutive(int []nums) {
		if(nums.length==0)return 0;
		Arrays.sort(nums);
		int currentStreak = 1;
		int longestStreak = 1;
		for(int i=0;i<nums.length;i++) {
			if(nums[i]!=nums[i-1]) {
				if(nums[i]==nums[i-1]+1)
					currentStreak++;
			}else {
				longestStreak = Math.max(longestStreak, currentStreak);
				currentStreak = 1;
			}
		}
		return Math.max(currentStreak, currentStreak);
	}
	public static void main(String[] args) {
		 int [] nums = {100, 4, 200, 1, 3, 2};
		System.out.print(new T128().longestConsecutive(nums));
	}
}
